{
  "version": 3,
  "sources": ["../../.pnpm/antd@5.4.6_react-dom@18.2.0_react@18.2.0/node_modules/antd/es/tooltip/style/index.js"],
  "sourcesContent": ["import { resetComponent } from '../../style';\nimport { initZoomMotion } from '../../style/motion';\nimport getArrowStyle, { MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { genComponentStyleHook, mergeToken, genPresetColor } from '../../theme/internal';\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS,\n    tooltipRadiusOuter\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      width: 'max-content',\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        padding: `${paddingSM / 2}px ${paddingXS}px`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: Math.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  },\n  // Arrow Style\n  getArrowStyle(mergeToken(token, {\n    borderRadiusOuter: tooltipRadiusOuter\n  }), {\n    colorBg: 'var(--antd-arrow-background-color)',\n    contentRadius: tooltipBorderRadius,\n    limitVerticalRadius: true\n  }),\n  // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none',\n      margin: token.sizePopupArrow\n    }\n  }];\n};\n// ============================== Export ==============================\nexport default ((prefixCls, injectStyle) => {\n  const useOriginHook = genComponentStyleHook('Tooltip', token => {\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    if (injectStyle === false) {\n      return [];\n    }\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgDefault,\n      borderRadiusOuter\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgDefault,\n      tooltipRadiusOuter: borderRadiusOuter > 4 ? 4 : borderRadiusOuter\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, _ref2 => {\n    let {\n      zIndexPopupBase,\n      colorBgSpotlight\n    } = _ref2;\n    return {\n      zIndexPopup: zIndexPopupBase + 70,\n      colorBgDefault: colorBgSpotlight\n    };\n  });\n  return useOriginHook(prefixCls);\n});"],
  "mappings": "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",
  "names": []
}
