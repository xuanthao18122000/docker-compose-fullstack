{
  "version": 3,
  "sources": ["../../.pnpm/antd@5.4.6_react-dom@18.2.0_react@18.2.0/node_modules/antd/es/skeleton/style/index.js"],
  "sourcesContent": ["import { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(`ant-skeleton-loading`, {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: `${size}px`\n});\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonColor = token => ({\n  background: token.skeletonLoadingBackground,\n  backgroundSize: '400% 100%',\n  animationName: skeletonClsLoading,\n  animationDuration: token.skeletonLoadingMotionDuration,\n  animationTimingFunction: 'ease',\n  animationIterationCount: 'infinite'\n});\nconst genSkeletonElementInputSize = size => Object.assign({\n  width: size * 5,\n  minWidth: size * 5\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    color,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [`${skeletonAvatarCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: color\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {\n      borderRadius: '50%'\n    },\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    color\n  } = token;\n  return {\n    [`${skeletonInputCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: color,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight)),\n    [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG)),\n    [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    color,\n    borderRadiusSM\n  } = token;\n  return {\n    [`${skeletonImageCls}`]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: color,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(imageSizeBase * 2)), {\n      [`${skeletonImageCls}-path`]: {\n        fill: '#bfbfbf'\n      },\n      [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: imageSizeBase * 4,\n        maxHeight: imageSizeBase * 4\n      }),\n      [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {\n        borderRadius: '50%'\n      }\n    }),\n    [`${skeletonImageCls}${skeletonImageCls}-circle`]: {\n      borderRadius: '50%'\n    }\n  };\n};\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [`${buttonCls}${skeletonButtonCls}-circle`]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [`${buttonCls}${skeletonButtonCls}-round`]: {\n      borderRadius: size\n    }\n  };\n};\nconst genSkeletonElementButtonSize = size => Object.assign({\n  width: size * 2,\n  minWidth: size * 2\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    color\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [`${skeletonButtonCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: color,\n      borderRadius: borderRadiusSM,\n      width: controlHeight * 2,\n      minWidth: controlHeight * 2\n    }, genSkeletonElementButtonSize(controlHeight))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, `${skeletonButtonCls}-lg`)), {\n    [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, `${skeletonButtonCls}-sm`));\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    color,\n    padding,\n    marginSM,\n    borderRadius,\n    skeletonTitleHeight,\n    skeletonBlockRadius,\n    skeletonParagraphLineHeight,\n    controlHeightXS,\n    skeletonParagraphMarginTop\n  } = token;\n  return {\n    [`${componentCls}`]: {\n      display: 'table',\n      width: '100%',\n      [`${componentCls}-header`]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [`${skeletonAvatarCls}`]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: color\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [`${skeletonAvatarCls}-circle`]: {\n          borderRadius: '50%'\n        },\n        [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [`${componentCls}-content`]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [`${skeletonTitleCls}`]: {\n          width: '100%',\n          height: skeletonTitleHeight,\n          background: color,\n          borderRadius: skeletonBlockRadius,\n          [`+ ${skeletonParagraphCls}`]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [`${skeletonParagraphCls}`]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: skeletonParagraphLineHeight,\n            listStyle: 'none',\n            background: color,\n            borderRadius: skeletonBlockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {\n          width: '61%'\n        }\n      },\n      [`&-round ${componentCls}-content`]: {\n        [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {\n          borderRadius\n        }\n      }\n    },\n    [`${componentCls}-with-avatar ${componentCls}-content`]: {\n      // Title\n      [`${skeletonTitleCls}`]: {\n        marginBlockStart: marginSM,\n        [`+ ${skeletonParagraphCls}`]: {\n          marginBlockStart: skeletonParagraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [`${componentCls}${componentCls}-block`]: {\n      width: '100%',\n      [`${skeletonButtonCls}`]: {\n        width: '100%'\n      },\n      [`${skeletonInputCls}`]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [`${componentCls}${componentCls}-active`]: {\n      [`\n        ${skeletonTitleCls},\n        ${skeletonParagraphCls} > li,\n        ${skeletonAvatarCls},\n        ${skeletonButtonCls},\n        ${skeletonInputCls},\n        ${skeletonImageCls}\n      `]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Skeleton', token => {\n  const {\n    componentCls\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: `${componentCls}-avatar`,\n    skeletonTitleCls: `${componentCls}-title`,\n    skeletonParagraphCls: `${componentCls}-paragraph`,\n    skeletonButtonCls: `${componentCls}-button`,\n    skeletonInputCls: `${componentCls}-input`,\n    skeletonImageCls: `${componentCls}-image`,\n    imageSizeBase: token.controlHeight * 1.5,\n    skeletonTitleHeight: token.controlHeight / 2,\n    skeletonBlockRadius: token.borderRadiusSM,\n    skeletonParagraphLineHeight: token.controlHeight / 2,\n    skeletonParagraphMarginTop: token.marginLG + token.marginXXS,\n    borderRadius: 100,\n    skeletonLoadingBackground: `linear-gradient(90deg, ${token.color} 25%, ${token.colorGradientEnd} 37%, ${token.color} 63%)`,\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  return {\n    color: colorFillContent,\n    colorGradientEnd: colorFill\n  };\n});"],
  "mappings": "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",
  "names": []
}
